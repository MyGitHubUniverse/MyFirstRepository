https://gist.github.com/phillipgreenii
gulpfile.js
var gulp = require( 'gulp' );
var gutil = require('gulp-util');
var argv = require('yargs').argv;
var del = require('del');
var mkdirp = require('mkdirp');
var touch = require('touch');

function stringToBoolean(string){
  if(!string) {
    return false;
  }
  switch(string.toLowerCase()) {
    case "false": return false;
    case "no": return false;
    case "0": return false;
    case "": return false;
    case "true": return true;
    default:
      throw new Error("unknown string: " + string);
  }
}

argv.skipTests = stringToBoolean(argv.skipTests);

/* TASKS */

gulp.task('clean', function(cb){
  del(['./build'], cb);
});


gulp.task( 'build', function () {
  mkdirp.sync('./build');
  touch.sync('./build/index.html');
} );


gulp.task( 'test', function () {
  if(argv.skipTests) {
    gutil.log(gutil.colors.yellow('Skipping Tests'));
    return;
  }

    gutil.log('Running Tests');
} );

gulp.task('prepare-for-maven-war', function(){
  return gulp.src('./build/**')
         .pipe(gulp.dest('target/gulp'));
});

package.json
{
  "name": "npm-to-maven-adapator",
  "version": "0.0.1-SNAPSHOT",
  "description": "Example of node project with maven build scripts",
  "private": true,
  "scripts": {
    "clean": "node node_modules/gulp/bin/gulp.js --no-color clean",
    "build": "node node_modules/gulp/bin/gulp.js --no-color build",
    "test": "node node_modules/gulp/bin/gulp.js --no-color test",
    "prepare-for-maven-war": "node node_modules/gulp/bin/gulp.js --no-color prepare-for-maven-war"
  },
  "devDependencies": {
    "del": "^1.1.1",
    "gulp": "^3.8.11",
    "gulp-util": "^3.0.1",
    "mkdirp": "^0.5.0",
    "touch": "0.0.3",
    "yargs": "^1.3.3"
  }
}
pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>phillipgreenii</groupId>
	<artifactId>npm-to-maven-adapator</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.test.skip>false</maven.test.skip>
		<gulp.output.directory>target/gulp</gulp.output.directory>
	</properties>
	<build>
		<plugins>
			<!-- Standard plugin to generate WAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<webResources>
						<resource>
							<directory>${gulp.output.directory}</directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.3.2</version>
				<executions>
					<!-- Required: The following will ensure `npm install` is called
					     before anything else during the 'Default Lifecycle' -->
					<execution>
						<id>npm install (initialize)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>initialize</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Required: The following will ensure `npm install` is called
					     before anything else during the 'Clean Lifecycle' -->
					<execution>
						<id>npm install (clean)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>pre-clean</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Optional: The following will output the npm configuration.
					     I do this so my CI logs will show the npm information used
							 for the build -->
					<execution>
						<id>npm config list (validate)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>validate</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>config</argument>
								<argument>list</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Required: This following calls `npm run build` where 'build' is
					     the script name I used in my project, change this if yours is
							 different -->
					<execution>
						<id>npm run build (compile)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>compile</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>build</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Optional: The following runs the script that copies the
					     appropriate files from the npm build directory into the location
							 'maven-war-plugin' is expecting.  The copying could be done
							 during the 'build' script, but I like to keep it separate.
							 Idealy in the future, I won't need maven at which, I can just
							 delete the 'prepare-for-maven-war' script. -->
					<execution>
						<id>npm run prepare-for-maven (prepare-package)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>prepare-for-maven-war</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Optional: The following will publish to npm if you run
					     `mvn deploy`. -->
					<execution>
						<id>npm run publish (deploy)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>deploy</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>publish</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Required: The following will run unit tests.  My test scripts
					     in npm look for the property 'skipTests', so I map it to
							 'maven.test.skip'
							 Note: the douple '-' syntax used below only works with npm >= 2. -->
					<execution>
						<id>npm run test (test)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>test</argument>
								<argument>--</argument>
								<argument>--skipTests=${maven.test.skip}</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Required: The following calls the npm script that cleans
					     up the build. -->
					<execution>
						<id>npm run clean (clean)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>clean</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>clean</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>

				<configuration>
					<environmentVariables>
						<!-- The following parameters create an NPM sandbox for CI -->
						<NPM_CONFIG_PREFIX>${basedir}/npm</NPM_CONFIG_PREFIX>
						<NPM_CONFIG_CACHE>${NPM_CONFIG_PREFIX}/cache</NPM_CONFIG_CACHE>
						<NPM_CONFIG_TMP>${project.build.directory}/npmtmp</NPM_CONFIG_TMP>
					</environmentVariables>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>




This is for running karma

<plugin>
    ...
    <executions>
        <execution>
            <!-- optional: you don't really need execution ids, but it looks nice in your build log. -->
            <id>install node and npm</id>
            <goals>
                <goal>install-node-and-npm</goal>
            </goals>
            <!-- optional: default phase is "generate-resources" -->
            <phase>generate-resources</phase>
        </execution>
    </executions>
    <configuration>
        <nodeVersion>v4.6.0</nodeVersion>

        <!-- optional: with node version greater than 4.0.0 will use npm provided by node distribution -->
        <npmVersion>2.15.9</npmVersion>
        
        <!-- optional: where to download node and npm from. Defaults to https://nodejs.org/dist/ -->
        <downloadRoot>http://myproxy.example.org/nodejs/</downloadRoot>
    </configuration>
</plugin>

For specif download
<plugin>
    ...
    <configuration>
        <!-- optional: where to download node from. Defaults to https://nodejs.org/dist/ -->
        <nodeDownloadRoot>http://myproxy.example.org/nodejs/</nodeDownloadRoot>
        <!-- optional: where to download npm from. Defaults to https://registry.npmjs.org/npm/-/ -->
        <npmDownloadRoot>https://myproxy.example.org/npm/</npmDownloadRoot>
    </configuration>
</plugin>

Running npm
All node packaged modules will be installed in the node_modules folder in your working directory. By default, colors will be shown in the log.

<execution>
    <id>npm install</id>
    <goals>
        <goal>npm</goal>
    </goals>

    <!-- optional: default phase is "generate-resources" -->
    <phase>generate-resources</phase>

    <configuration>
        <!-- optional: The default argument is actually
        "install", so unless you need to run some other npm command,
        you can remove this whole <configuration> section.
        -->
        <arguments>install</arguments>
    </configuration>
</execution>

Running gulp
Very similar to the Grunt execution. It will run gulp according to the gulpfile.js in your working directory. By default, colors will be shown in the log.

<execution>
    <id>gulp build</id>
    <goals>
        <goal>gulp</goal>
    </goals>

    <!-- optional: the default phase is "generate-resources" -->
    <phase>generate-resources</phase>

    <configuration>
        <!-- optional: if not specified, it will run gulp's default
        task (and you can remove this whole <configuration> section.) -->
        <arguments>build</arguments>
    </configuration>
</execution>

Running Karma
<execution>
    <id>javascript tests</id>
    <goals>
        <goal>karma</goal>
    </goals>

    <!-- optional: the default plase is "test". Some developers
    choose to run karma in the "integration-test" phase. -->
    <phase>test</phase>

    <configuration>
        <!-- optional: the default is "karma.conf.js" in your working directory -->
        <karmaConfPath>src/test/javascript/karma.conf.ci.js</karmaConfPath>
    </configuration>
</execution>
Skipping tests: If you run maven with the -DskipTests flag, karma tests will be skipped.

Ignoring failed tests: If you want to ignore test failures run maven with the -Dmaven.test.failure.ignore flag, karma test results will not stop the build but test results will remain in test output files. Suitable for continuous integration tool builds.

Why karma.conf.ci.js? When using Karma, you should have two separate configurations: karma.conf.js and karma.conf.ci.js. (The second one should inherit configuration from the first one, and override some options. The example project shows you how to set it up.) The idea is that you use karma.conf.js while developing (using watch/livereload etc.), and karma.conf.ci.js when building - for example, when building, it should only run karma once, it should generate xml reports, it should run only in PhantomJS, and/or it should generate code coverage reports.

Running Karma through Grunt or gulp: You may choose to run Karma directly through Grunt or through gulp instead, as part of




Running Karma
<execution>
    <id>javascript tests</id>
    <goals>
        <goal>karma</goal>
    </goals>

    <!-- optional: the default plase is "test". Some developers
    choose to run karma in the "integration-test" phase. -->
    <phase>test</phase>

    <configuration>
        <!-- optional: the default is "karma.conf.js" in your working directory -->
        <karmaConfPath>src/test/javascript/karma.conf.ci.js</karmaConfPath>
    </configuration>
</execution>
Skipping tests: If you run maven with the -DskipTests flag, karma tests will be skipped.

Ignoring failed tests: If you want to ignore test failures run maven with the -Dmaven.test.failure.ignore flag, karma test results will not stop the build but test results will remain in test output files. Suitable for continuous integration tool builds.

Why karma.conf.ci.js? When using Karma, you should have two separate configurations: karma.conf.js and karma.conf.ci.js. (The second one should inherit configuration from the first one, and override some options. The example project shows you how to set it up.) The idea is that you use karma.conf.js while developing (using watch/livereload etc.), and karma.conf.ci.js when building - for example, when building, it should only run karma once, it should generate xml reports, it should run only in PhantomJS, and/or it should generate code coverage reports.

Running Karma through Grunt or gulp: You may choose to run Karma directly through Grunt or through gulp instead, as part of


